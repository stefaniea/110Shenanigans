  <!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
  <meta name="viewport" content="width=1024, user-scalable=no">

  <title>The Body of N</title>

  <!-- Required stylesheet -->
  <link rel="stylesheet" media="screen" href="core/deck.core.css">

  <!-- Extension CSS files go here. Remove or add as needed. -->
  <link rel="stylesheet" media="screen" href="extensions/goto/deck.goto.css">
  <link rel="stylesheet" media="screen" href="extensions/menu/deck.menu.css">
  <link rel="stylesheet" media="screen" href="extensions/navigation/deck.navigation.css">
  <link rel="stylesheet" media="screen" href="extensions/status/deck.status.css">
  <link rel="stylesheet" media="screen" href="extensions/scale/deck.scale.css">
  <link href="css/bootstrap.min.css" rel="stylesheet">
  

  <!-- Style theme. More available in /themes/style/ or create your own. -->
  <link rel="stylesheet" media="screen" href="themes/style/goldfishTheme.css">

  <!-- Transition theme. More available in /themes/transition/ or create your own. -->
  <link rel="stylesheet" media="screen" href="themes/transition/horizontal-slide.css">

  <!-- Basic black and white print styles -->
  <link rel="stylesheet" media="print" href="core/print.css">

  <!-- Required Modernizr file -->
  <script src="modernizr.custom.js"></script>

        <!-- includedeck is called at the end in this presentation (just to put the heavy demo-dedicated stuff at the end) -->
 
</head>
<body>
 <div class="deck-container">

<section class="slide" id="Command Line Arguments">
  <h2>A Review of Command-Line Arguments</h2>
  <p class = "slide">Yes. you need to review it.  </p>
  <ul> 
    <li>For this homework and beyond, you will often have to use
      command-line arguments, which you will have to type in every
      time you run the program.</li>
      <li>Remember that command-line arguments are just an array of
        Strings that are read in automatically to your <code>main()</code>
        function. 
      </li>
      <ul>
        <li>Once <tt>PApplet.main()</tt> is called in your <tt>main()</tt>
          function, the program will not go back to <tt>main()</tt>, so
          any command-line arguments will need to be processed within <tt>main()</tt>
          but before you call <tt>PApplet.main()</tt>.
        </li>
      </ul>
      <ul>
        <li>Since the arguments are read in as Strings, remember also to
          use <tt>Integer.parseInt()</tt> or <tt>Double.parseDouble()</tt>
          to convert numeric arguments to whatever type you need.
        </li>
      </ul>
    </ul>
  </section>

  <section class="slide">
    <h2>A Review of Command-Line Arguments: 
      Take 2</h2>
      <p class = "slide">Yes. read it.  </p>
      
      <li>Try out the program <tt>OnionAdder</tt> to see how
        command-line arguments work. 
      </li>
      <ul>
        <li>In order to pass command line arguments into your program,
          you must use Dr. Java's interactions pane to run the
          program.&nbsp; You can run the program by going to the
          interactions pane and typing the following command: <tt>java
          OnionAdder 300 55.532</tt>
        </li>
        <li>Let's take a look at the code in the <tt>OnionAdder.java</tt>
          program. Notice that putting a "+" sign between <tt>args[0]</tt>
          and <tt>args[1]</tt> concatenates the strings; the program
          needs to convert the inputs to integers or doubles before it
          can perform calculations with them.</li>
        </ul>
        <p class = "slide">Read it. But where is this OnionAdder? -> NOW PRESS THE ARROW!  </p>
      </section>

      <section class="slide" id="OnionAdder" style="overflow: scroll">
       <pre>      
        <code>

          /* 
          * Run this program by typing:  java OnionAdder 300 55.532
          * 
          * Expected output with the above example:
          * 30055.532 &lt;---Strings concatenated 
          * 355.532 &lt;---numbers added 
          * Shrek has 355.532 onions. 
          * 
          */

          public class OnionAdder { 
          public static void main(String[] args) {
          int a = Integer.parseInt(args[0]);
          double b = Double.parseDouble(args[1]);
          System.out.println(args[0] + args[1] + " &lt;---Strings concatenated");
          System.out.println(a + b + " &lt;---numbers added");
          System.out.println("Shrek has " + (a + b) + " onions.");
        }
      }

    </code>
  </pre>
</section>

<!-- deck.navigation snippet -->
<div aria-role="navigation">
  <a href="#" class="deck-prev-link" title="Previous">&#8592;</a>
  <a href="#" class="deck-next-link" title="Next">&#8594;</a>
</div>

<!-- deck.status snippet -->
<p class="deck-status deck-progress-10"> <span class="deck-status-current"></span> / <span class="deck-status-total"></span> </p>


<!-- deck.goto snippet -->
<form action="." method="get" class="goto-form">
  <label for="goto-slide">Go to slide:</label>
  <input type="text" name="slidenum" id="goto-slide" list="goto-datalist">
  <datalist id="goto-datalist"></datalist>
  <input type="submit" value="Go">
</form>

<!-- End extension snippets. -->
</div>

<!-- Required JS files. -->
<script src="jquery.min.js"></script>
<script src="core/deck.core.js"></script>
<script src="js/bootstrap.min.js"></script>
 <script src="js/jquery-ui-1.10.4.custom.min.js"></script>

<!-- Extension JS files. Add or remove as needed. -->
<script src="extensions/menu/deck.menu.js"></script>
<script src="extensions/goto/deck.goto.js"></script>
<script src="extensions/status/deck.status.js"></script>
<script src="extensions/navigation/deck.navigation.js"></script>
<script src="extensions/scale/deck.scale.js"></script>
<script src="js/script.js"></script>
<script src="extensions/includedeck/load.js"></script>
 <script src="extensions/search/deck.search.js"></script>


  


<!-- Initialize the deck. You can put this in an external file if desired. -->
<script>
            includedeck("profile-3 theme:x:goldfishTheme", {
               PREFIX: "", // deck.js is in the parent folder for this presentation
               AFTERINIT: function() {
                  // we register the listeners before call the deck init
                  $('.demotoshow1').bind('deck.toplevelBecameCurrent', function() {
                     $(".demo").html($(".demo").html()+"1");
                  });
                  $('.demotoshow2').bind('deck.toplevelBecameCurrent', function() {
                     $(".demo").html($(".demo").html()+"2");
                  });
               }
            });

            $.deck('search');
</script>



</body>
</html>
